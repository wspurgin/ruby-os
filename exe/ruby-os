#!/usr/bin/env ruby

require 'readline'

begin
  require 'ruby-os'
rescue LoadError
  lib = File.expand_path('../../lib', __FILE__)
  $LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)
  retry
end

class RubyOS::Simulation
  attr_accessor :manager, :scheduler, :memory

  def self.run
    self.new.run
  end

  def initialize
    # Initialize Queue manager and basic queues
    @manager = RubyOS::QueueManager.new
    @manager.add_queue :ready
    @manager.add_queue :waiting
    @manager.add_queue :blocked
    @memory_size = 10_240
    @block_size = 40 # 256 blocks
    @default_alloc = @block_size
  end

  def run

    puts "Initializing Queues and Processes"

    if ARGV.count > 0
      file = ARGV[0]
      load_pcbs(file)
    else
      print_all
    end

    puts "Memory Size: #{@memory_size.to_f / 2**10 } KB"

    Readline.completion_proc = Proc.new do |str|
      # TODO make smarter so that if a command is already specified, use either
      # defined inputs into those commands or just files.
      defined_commands.grep(/^#{Regexp.escape(str)}/) +
        Dir[str+'*'].grep(/^#{Regexp.escape(str)}/)
    end

    puts "This is RubyOS, a simulated OS written in Ruby âœ“"
    while line = Readline.readline('> ', true)
      cmd, *args = line.split(" ")
      break if !handle(cmd, args)
    end
  end

  def load_pcbs(file)

    processes = read_input_file(file)

    processes.each_with_index do |pcb, i|
      if !["ready", "waiting"].include? pcb.state
        puts "Unrecognized state: '#{pcb.state}'. Using 'ready' by default"
        pcb.update_state('ready')
      end
      if procs.include? pcb.pid
        puts "Proc with #{pcb.pid} already exists, throwing this process out."
        next
      end
      procs.push pcb
    end
    sort_process_by_arrival!

    puts
    print_all
    puts

    true
  end

  def read_input_file(file)
    processes = []
    File.open(file, 'r') do |input|
      if input.readline.split(",").count == 1
        processes = read_cse7343_input(input)
        break
      end
      input.rewind
      pcb_strings = input.readlines
      processes = pcb_strings.map do |pcb_string|
        pcb_pieces = pcb_string.split(',').map(&:strip)
        if pcb_pieces.count < 3
          puts "File PCB input was unrecognized, expected format: pid,execution_address,state:[,options], see docs for details."
          next
        end
        pid, state, *option_args = pcb_pieces
        begin
          pid = Integer(pid)
        rescue ArgumentError
          puts "File PCB input was unrecognized, expected format: pid,execution_address,state[,options], see docs for details."
          next
        end
        options_bad = false
        option_args = Array.wrap(option_args)
        options = {
          wait_time: 0
        }
        option_args.each do |option_pair|
          option, value = option_pair.split(":").map(&:strip)
          option = option.to_sym
          if value.nil? || option.nil?
            puts "Option format unrecognized, for #{pcb_string}. See docs for expected format"
          end
          begin
            options[option] = Integer(value)
          rescue ArgumentError
            if option =~ /^(remaining_processing_time|priority|arrival_time|memory_required)/
              puts "#{option} is a defined option that requires integer input"
              options_bad = true
              break
            end
            options[option] = value
          end
        end
        next if options_bad
        options.merge!({ state: state, wait_time: 0 })
        RubyOS::PCB.new(pid, options)
      end
    end
    processes.compact
  rescue IOError => e
    puts e
    return []
  end

  def read_cse7343_input(file_input)
    file_input.rewind
    @memory_size = Integer(file_input.readline)
    puts "Memory being created of size #{@memory_size} Bytes"
    @memory = RubyOS::Memory::Manager.new @memory_size, @block_size, @default_alloc
    memory.reserve! # Reserve all memory
    file_input.readline # spaces being entered
    while (line = file_input.readline).split(",").count != 1
      parts = line.split(",")
      addr = Integer(parts[0])
      size = Integer(parts[1])
      begin
      memory.free_memory(addr, size)
      rescue RubyOS::Memory::OutOfBoundsAssignment
        puts "Hole could not be made"
        puts "0x#{addr.to_s(16)} to 0x#{(addr + size).to_s(16)} is out of memory bounds"
      end
    end

    processes = []
    # Now create procs
    while line = file_input.gets
      parts = line.split(",")
      pid = Integer(parts[0])
      arrival_time = Integer(parts[1])
      remaining_processing_time = Integer(parts[2])
      memory_required = Integer(parts[3])
      processes << RubyOS::PCB.new(pid, state: "ready", priority: 4, # default priority
        arrival_time: arrival_time,
        remaining_processing_time: remaining_processing_time,
        memory_required: memory_required)
    end
    return processes
  end

  def handle(cmd, args)
    args = Array.wrap(args)
    case cmd
    when "help"
      print_usage
    when "add_proc"
      add_proc_interactively
    when "delete_proc"
      delete_proc_interactively
    when "show_procs"
      print_all
    when "mem_free"
      mem_free!
    when "clear_procs"
      clear_procs
    when "simulate"
      simulate(args)
    when "load_pcbs"
      load_pcbs(args.first)
    when "set_memory"
      set_memory(args)
    when "exit", "quit"
      return false
    else
      puts "Unknown Command"
      print_usage
    end
  end

  def simulate(args)
    request = args.any? ? args.first.strip : "srpt"
    orig_manager = deep_copy_manager
    orig_procs = deep_copy_procs
    orig_memory = memory.nil? ? {} : memory.memory_map.dup
    @scheduler = case request
                 when /^s((rpt)|(jf))?/i
                   RubyOS::SrptScheduler.new manager
                 when /^r(obin)?/i
                   q = 2
                   puts "Enter time share window, q: (hit enter to use default of 2)"
                   begin
                     print ">"
                     ans = $stdin.gets.chomp
                     q = Integer(ans) if !ans.empty?
                   rescue ArgumentError
                     puts "Value entered is not an integer, please enter integer value"
                     retry
                   end
                   RubyOS::RobinScheduler.new manager, q
                 when /^p(riority)?/i
                   RubyOS::PriorityScheduler.new manager
                 else
                   puts "Unrecognized scheduler, choices are srpt, robin, priority"
                   return true
                 end
    request = args.any? && args.count >= 2 ? args[1].strip : "ff"
    @memory = case request
              when /^f(irst)?(f(it)?)?/i
                RubyOS::Memory::FirstFitManager.new @memory_size, @block_size, @default_alloc
              when /^b(est)?(f(it)?)?/i
                RubyOS::Memory::BestFitManager.new @memory_size, @block_size, @default_alloc
              when /^w(orst)?(f(it)?)?/i
                RubyOS::Memory::WorstFitManager.new @memory_size, @block_size, @default_alloc
              else
                puts "Unrecognized memory manager, choices are firstfit, bestfit, worstfit"
                return true
              end
    memory.memory_map = orig_memory if !orig_memory.empty?

    puts "Beginning simulation with #{scheduler.class} as the Process Scheduler"
    puts "and #{memory.class} as the Memory Manager"
    completed_procs = []
    avg_waiting_time = 0.0
    number_of_context_switches = 0
    attempts_to_allocate = 0
    total_procs = procs.count
    avg_mem_util = 0.0
    total_time = 0
    latest_arrival = procs.map(&:arrival_time).max || 0

    # Estimate number of iterations
    max_iterations = (total_procs + procs.sum(&:remaining_processing_time) +
                      latest_arrival) * 10
    puts "Max iterations calculated from process time: #{max_iterations}"

    procs.each { |pcb| pcb.accounting_information[:wait_time] = 0 }

    # current_proc = scheduler.next_proc(:ready)
    current_proc = nil
    # TODO allow file logging
    log = $stdout
    max_iterations.times do |t|
      log.puts "\n#### TIME: #{t} ####"

      ##### Process arrivals ######
      # Are there any processes arriving?
      arrivals = RubyOS::Queue.new
      loop do
        break if procs.empty? || procs.first.arrival_time != t
        arrivals.push procs.pop
      end

      # First, we should try to get processes out of the blocked queue before
      # handling arrivals
      blocked_queue.count.times do
        attempts_to_allocate += 1
        blocked_proc = blocked_queue.pop
        bring_into_memory(blocked_proc, log)
      end

      # Now we can handle all the arrivals
      while !arrivals.empty?
        attempts_to_allocate += 1
        process = arrivals.pop
        bring_into_memory(process, log)
      end

      # Get the next proc to scheudle
      next_proc = scheduler.next_proc(:ready, current_proc)
      break if next_proc.nil? &&
        waiting_queue.empty? &&
        blocked_queue.empty? &&
        procs.empty?

      # Calculate current memory stats
      mem_util = memory.total_reserved_memory.to_f/memory.total_memory
      puts "Memory Utilization: #{(mem_util * 100).round(4)}%"
      avg_mem_util += mem_util
      total_time = t + 1

      # Output the queues
      print_queues(log)
      log.puts ""

      # If we reached this point, there are still processes in the waiting queue
      # but we have no current process or next process yet, so we should skip
      # the context switch and current_proc update steps
      if !next_proc.nil?
        if current_proc.nil? || next_proc != current_proc
          number_of_context_switches += 1
          log.puts "Perfroming context switch with #{next_proc}"
          ready_queue.push current_proc if !current_proc.nil?
          current_proc = next_proc
        end

        current_proc.remaining_processing_time -= 1

        if current_proc.remaining_processing_time <= 0
          log.puts "#{current_proc} Completed"

          # place proc in simulated 'success' and 'Free' proc
          completed_procs << current_proc
          memory.free_memory(current_proc.base_address, current_proc.memory_limit)
          current_proc = nil
        end
      end

      log.puts "Current Proc in CPU: #{current_proc}" if !current_proc.nil?

      # NOTE for now, at the end of each cycle one process is moved from the
      # waiting queue to the ready queue.
      if waiting_queue.any?
        _pcb = waiting_queue.pop
        _pcb.update_state("ready")
        ready_queue.push _pcb
        log.puts "New arrival to the :ready queue from the waiting queue. #{_pcb}"
      end

      # Increment all wait times for processes in memory
      ready_queue.each { |pcb| pcb.wait_time += 1 }
      waiting_queue.each { |pcb| pcb.wait_time += 1 }

    end
    avg_mem_util /= total_time

    if waiting_queue.any? || ready_queue.any? || !current_proc.nil?
      puts "Simulation did not finish within #{max_iterations} iterations."
      puts "This just means that our estimation for max iterations was off."
      puts "The average wait time will still be calculated."
    end
    if blocked_queue.any?
      number_too_large = blocked_queue.map(&:memory_required)
        .count { |m| m > @memory_size }
      puts "Simulation ended with processes in the blocked queue."
      if number_too_large > 0
        puts "Upon inspection, there are #{number_too_large} process where they"
        puts "required memory exceed the totl memory, #{@memory_size} Bytes."
      end
      puts
    end
    puts "Completed Procs: #{completed_procs.inspect}"
    avg_waiting_time = completed_procs.sum(&:wait_time)
    avg_waiting_time += ready_queue.sum(&:wait_time) if ready_queue.any?
    avg_waiting_time += waiting_queue.sum(&:wait_time) if waiting_queue.any?
    divsor = total_procs > 0 ? total_procs : 1
    avg_waiting_time = avg_waiting_time.to_f / divsor
    avg_context_switches = number_of_context_switches.to_f / divsor
    allocated_processes = completed_procs.count + waiting_queue.count + ready_queue.count
    allocation_probability = allocated_processes.to_f / attempts_to_allocate
    blocking_probability = 1 - allocation_probability

    puts "\n\nThe Results using the #{scheduler.class} and #{memory.class}:"
    puts "Average Wait Time: #{avg_waiting_time} time units"
    puts "Average Context Switches per Process: #{avg_context_switches}"
    puts "Total Number of Context Switches: #{number_of_context_switches}"
    puts "Total Processes: #{total_procs}"
    puts "Total Completed Procs: #{completed_procs.count}"

    puts "\nAverage Memory Utilization: #{(avg_mem_util * 100).round(4)}%"
    puts "Total Allocated Processes: #{allocated_processes}"
    puts "Allocation Attempts: #{attempts_to_allocate}"
    puts "Allocation Probability: #{allocation_probability}"
    puts "Blocking Probability: #{blocking_probability}"

    puts ""
    @manager = orig_manager
    @procs = orig_procs
  end

  def print_queues(log=$stdout)
    ready_elipse = ready_queue.count > 3 ? "..." : ""
    waiting_elipse = waiting_queue.count > 3 ? "..." : ""
    puts "Ready Queue: #{ready_queue.first(3)}#{ready_elipse}" if ready_queue.any?
    puts "Waiting Queue: #{waiting_queue.first(3)}#{waiting_elipse}" if waiting_queue.any?
    puts "Block Queue: #{blocked_queue}" if blocked_queue.any?
    true
  end

  def print_all
    puts "All Procs: #{procs}"
    true
  end

  def print_usage
    puts "The following are the accepted commands:"
    puts "help        - prints this usuage guide"
    puts "add_proc    - interactively adds a process to a queue"
    puts "delete_proc - interactively remove a process from a queue"
    puts "mem_free    - frees all memory in the map"
    puts "clear_procs - remove all procs from the simulation session"
    puts "show_procs  - prints all procs to STDOUT"
    puts "simulate [scheduler] - runs simulation with the given scheduler. Choices are sjf, robin, priority. Default is sjf."
    puts "load_pcbs [file] - load pcbs from the give file"
    puts "exit        - quits the program"
    puts "quit        - alias for exit"
    true
  end

  def add_proc_interactively
    pid = 0
    options = {
      state: "ready",
      priority: 4,
      remaining_processing_time: 8,
      arrival_time: 0,
      memory_required: 10,
      wait_time: 0,
    }

    puts "Enter process id"
    begin
      pid = Integer(Readline.readline('> ', true))
      raise "PID not unique! Enter unique pid" if procs.include? pid
    rescue ArgumentError
      puts "Value entered is not an integer, please enter integer value"
      retry
    rescue RuntimeError => e
      puts e
      retry
    end

    puts "Enter process' priority (hit enter to use default of 4)"
    begin
      ans = Readline.readline('> ', true)
      options[:priority] = Integer(ans) if !ans.empty?
    rescue ArgumentError
      puts "Value entered is not an integer, please enter integer value"
      retry
    end

    puts "Enter process' remaining processing time (hit enter to use default of 8)"
    begin
      ans = Readline.readline('> ', true)
      options[:remaining_processing_time] = Integer(ans) if !ans.empty?
    rescue ArgumentError
      puts "Value entered is not an integer, please enter integer value"
      retry
    end

    puts "Enter process' arrival time (hit enter to use default of 0)"
    begin
      ans = Readline.readline('> ', true)
      options[:arrival_time] = Integer(ans) if !ans.empty?
    rescue ArgumentError
      puts "Value entered is not an integer, please enter integer value"
      retry
    end

    puts "Enter process' memory required (hit enter to use default of 10)"
    begin
      ans = Readline.readline('> ', true)
      options[:arrival_time] = Integer(ans) if !ans.empty?
    rescue ArgumentError
      puts "Value entered is not an integer, please enter integer value"
      retry
    end

    puts "Which queue would the process enter? ('waiting', or 'ready')"
    begin
      state = Readline.readline('> ', true)
      case state
      when /^w(aiting)?/i
        options[:state] = "waiting"
      when /^r(eady)?/i
        options[:state] = "ready"
      else
        raise ArgumentError.new "state must be either 'ready' or 'waiting'"
      end
    rescue
      puts "Unrecognized queue: '#{state}', please enter a valid queue (ready,waiting)"
      retry
    end

    pcb = RubyOS::PCB.new(pid, options)
    procs.push pcb

    print_all
    true
  end

  def delete_proc_interactively
    puts "Enter the PID of the process you wish to remove (hit enter to use the default location)"
    begin
      pos = Readline.readline('> ', true)
      pos = if pos.empty?
              nil
            else
              Integer(pos)
            end
      pcb = procs.pop(pos)
    rescue ArgumentError
      puts "Value entered is not an integer, please enter integer value"
      retry
    end

    if pcb.nil?
      puts "No process was removed (possible gave a PID that didn't exist?)"
    else
      puts "Removed process: #{pcb}"
    end

    print_all
    true
  end

  def set_memory(args)
    @memory_size = Integer(args.first.strip) if args.any?
    puts "Memory size: #{@memory_size} Bytes"
    true
  rescue ArgumentError
    log.puts "Not a valid integer :#{args.first}"
    return true
  end

  def mem_free!
    @memory.free!
    puts "All memory is freed"
    true
  end

  def clear_procs
    procs.clear
    puts "All processes removed"
    true
  end

  private

  def bring_into_memory(process, log=$stdout)
    # Attempt to assign proc in memory
    memory.assign_process_base_address(process)

    # move the process into the proper queue
    case process.state
    when /waiting/
      waiting_queue.push process
      log.puts "New arrival to waiting queue: #{process}"
    else
      ready_queue.push process
      log.puts "New arrival to ready queue: #{process}"
    end

  rescue RubyOS::Memory::NoContiguousMemoryError
    log_contiguous_memory_error(log, process)
    blocked_queue.push process
  rescue RubyOS::Memory::OutOfMemoryError
    log.puts "Memory Full!"
    blocked_queue.push process
  end

  def log_contiguous_memory_error(log, process)
    if memory.possible_external_fragmentation? &&
        memory.total_available_memory >= process.memory_required
      log.puts %Q{
      External Fragmentation! #{memory.total_available_memory} Bytes available,
      but no section of #{process.memory_required} Bytes contiguously...}
    end
    log.puts %Q{No available memory of #{process.memory_required} Bytes}
  end

  def defined_commands
    [
      "help",
      "add_proc",
      "delete_proc",
      "show_procs",
      "mem_free",
      "clear_procs",
      "simulate",
      "load_pcbs",
      "set_memory",
      "exit",
      "quit",
    ]
  end

  # Ruby is a pass-by-value language, *but* all those values (by default) are
  # references to memory locations. As such we have to duplicate all the PCBs
  # and rebuild the Queues and Manager to duplicate the manager. All Ruby
  # objects have a 'dup' method, but that only does a shallow copy.
  def deep_copy_manager
    dup_ready_queue = RubyOS::Queue.new ready_queue.map { |pcb| RubyOS::PCB.new pcb.pid, pcb.accounting_information.dup }
    dup_waiting_queue = RubyOS::Queue.new waiting_queue.map { |pcb| RubyOS::PCB.new pcb.pid, pcb.accounting_information.dup }
    dup_blocked_queue = RubyOS::Queue.new blocked_queue.map { |pcb| RubyOS::PCB.new pcb.pid, pcb.accounting_information.dup }
    mapping = { ready: dup_ready_queue,
                waiting: dup_waiting_queue,
                blocked: dup_blocked_queue }
    RubyOS::QueueManager.new mapping
  end

  def deep_copy_procs
    RubyOS::Queue.new procs.map { |pcb| RubyOS::PCB.new pcb.pid, pcb.accounting_information.dup }
  end

  def sort_process_by_arrival!
    procs.sort_by! { |pcb| [pcb.arrival_time, pcb.pid] }
  end

  def ready_queue
    manager[:ready]
  end

  def waiting_queue
    manager[:waiting]
  end

  def blocked_queue
    manager[:blocked]
  end

  def procs
    @procs ||= RubyOS::Queue.new
  end

end

RubyOS::Simulation.run
